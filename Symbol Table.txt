Token           					Lexeme
Comment:							//WEEEEEEEE
Noise Word: then						then
Keyword: Flow Control: if					if
Delimiter: open parenthesis    					(
Identifier							two
Logical Operator: And						&&
Identifier							two
Delimiter: close parenthesis   					)
Delimiter: open curly bracket  					{
Delimiter: close curly bracket 					}
Delimiter: open square bracket 					[
Delimiter: close square bracket					]
Delimiter: open parenthesis    					(
Delimiter: close parenthesis   					)
Arithmetic Operator: Increment					++
Arithmetic Operator: Addition					+
Arithmetic Operator: Decrement					--
Arithmetic Operator: Subtraction				-
Arithmetic Operator: Division					/
Arithmetic Operator: Modulo					%
Arithmetic Operator: Multiply					*
Relational Operator: Less Than equal to				<=
Relational Operator: Greater Than equal to			>=
Relational Operator: Less Than					<
Relational Operator: Greater Than				>
Logical Operator: Or						||
Logical Operator: And						&&
Logical Operator: Not						!
Relational Operator: Not equal to				!=
Relational Operator:  equal to					==
Keyword: Iteration Control: while				while
Keywords: Iteration Control: do					do
Keyword: Flow Control: if					if
Keyword: Flow Control: otherwise				otherwise
Reserved Word: Iteration Control: stop				stop
Keywords: Flow Control: else					else
Reserved Word: Alphabet						Alphabet
Keyword: case							case
Keywords: Comp							comp
Keyword: Data type: Collection					Collection
Keywords: Flow Control: default					default
Keywords: Flow Control: else					else
euler Constant: 2.71828						euler
Reserved Word: Tralse Value: false				false
Keyword: Iteration Control: for					for
Reserved Word: Data type: Item					Item
Keyword: Flow Control: if					if
Constant Value: 2,147,483,647					int32
Constant Value: 273						kelvin
Reserved Word: Null Value: None					None
Reserved Word: Data Type: Number				Number
Reserved Word: Iteration Control: resume			resume
Constant Value: 1,3,5,7,9					odd
Keyword: Flow Control: otherwise				otherwise
Constant Value: 3.14						pi
Reserved Word: read						read
Reserved Word: Iteration Control: resume			resume
Reserved Word: return						return
Reserved Word: Data Type: Sentence				Sentence
Reserved Word: Iteration Control: stop				stop
Keyword: Flow Control: switch					switch
Noise Word: then						then
Reserved Word: Tralse Value: true				true
Reserved Word: Data type: Tralse				Tralse
Keyword: Iteration Control: while				while
Reserved word: write						write
Identifier							two
Sentence Literal: 						qweqwe
Identifier							qwe23_eqw
Identifier							qweqwewq
Comment:							//qweqweqweqw
Unknown Symbol								qwe~ewqwe
Multi Line Comment: 						~Apparently this is 
true LMAO ~
Reserved Word: Data Type: Number				Number
Identifier							x
Assignment Operator: equal					=
Numeric: float							23.423
Delimiter: semicolon           					;
Keyword: Flow Control: if					if
Delimiter: open parenthesis    					(
Identifier							x
Relational Operator: Greater Than equal to			>=
Numeric: int							23
Delimiter: close parenthesis   					)
Delimiter: open curly bracket  					{
Identifier							x
Assignment Operator: equal					=
Numeric: int							40
Delimiter: semicolon           					;
Delimiter: close curly bracket 					}
Keyword: Flow Control: otherwise				otherwise
Delimiter: open parenthesis    					(
Identifier							x
Relational Operator: Less Than equal to				<=
Numeric: int							12
Delimiter: close parenthesis   					)
Delimiter: open curly bracket  					{
Identifier							x
Assignment Operator: equal					=
Numeric: int							0
Delimiter: semicolon           					;
Delimiter: close curly bracket 					}
Keywords: Flow Control: else					else
Delimiter: open curly bracket  					{
Identifier							x
Assignment Operator: equal					=
Numeric: int							4
Delimiter: semicolon           					;
Delimiter: close curly bracket 					}
Keyword: Iteration Control: for					for
Delimiter: open parenthesis    					(
Reserved Word: Data Type: Number				Number
Identifier							i
Assignment Operator: equal					=
Numeric: int							0
Delimiter: semicolon           					;
Identifier							i
Relational Operator: Less Than equal to				<=
Numeric: int							23
Delimiter: semicolon           					;
Identifier							i
Arithmetic Operator: Increment					++
Delimiter: close parenthesis   					)
Delimiter: open curly bracket  					{
Reserved word: write						write
Delimiter: open parenthesis    					(
Identifier							i
Delimiter: close parenthesis   					)
Delimiter: semicolon           					;
Delimiter: close curly bracket 					}
